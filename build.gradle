plugins {
	id 'fabric-loom' version '1.8-SNAPSHOT'
	id 'maven-publish'
	id "com.modrinth.minotaur" version "2.+"
}

repositories {
	maven {
		url 'https://masa.dy.fi/maven'
	}
	mavenCentral()
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}
}

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

archivesBaseName = project.archives_base_name
version = project.minecraft_version+'-'+project.mod_version
group = project.maven_group

loom {
	runs {
		testServer {
			server()
			environment = "server"
			runDir = "runTest"
			ideConfigGenerated = true
			configName = "Test Server"
		}
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "carpet:fabric-carpet:${project.carpet_minecraft_version}-${project.carpet_core_version}"

	implementation 'com.google.code.findbugs:jsr305:3.0.2'

	def includeImplementation = { String dependencyNotation ->
		implementation(dependencyNotation) {
			transitive = false
		}
		include(dependencyNotation)
	}

	includeImplementation "net.dv8tion:JDA:${project.jda_version}"
	includeImplementation "com.neovisionaries:nv-websocket-client:2.14"
	includeImplementation "com.squareup.okhttp3:okhttp:3.14.9"
	includeImplementation "com.squareup.okio:okio:1.17.2"
	includeImplementation "net.sf.trove4j:core:3.1.0"
	includeImplementation "org.apache.commons:commons-collections4:4.4"
	
	
	// soft dependencies
	
	modCompileOnly 'maven.modrinth:scarpet-graphics:0.1.4'
	runtimeOnly 'maven.modrinth:scarpet-graphics:0.1.4'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.mod_version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 21
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

tasks.register('appendChangelog', AppendChangelogTask) {
	changelog = rootProject.file("changelog.md").text
	changelogHistoryFile = rootProject.file("docs/pages/changelog.md")
	versionName = project.mod_version
}

import com.modrinth.minotaur.dependencies.ModDependency

modrinth {
	token = System.getenv("MODRINTH_TOKEN")
	projectId = "m00L1GVJ"
	versionNumber = project.mod_version
	versionType = "release"
	uploadFile = remapJar
	loaders = ["fabric"]
	dependencies = [
			// carpet
			new ModDependency("TQTTVgYE" ,"required")
	]
	try {
		changelog = rootProject.file("changelog.md").text
	} catch(FileNotFoundException ignored) { // github actions would fail otherwise
		changelog = ""
	}
	syncBodyFrom = rootProject.file("README.md").text
}
tasks.modrinth.dependsOn tasks.appendChangelog

import java.text.SimpleDateFormat
class AppendChangelogTask extends DefaultTask {
	@Input
	String changelog = ""
	
	@Input
	String versionName = ""
	
	@Input
	SimpleDateFormat dateFormat = new SimpleDateFormat("LLLL dd, yyyy", Locale.ENGLISH)
	
	@InputFile
	File changelogHistoryFile
	
	
	@TaskAction
	void action() {
		def headline = """## ${versionName} â€“ <small>${dateFormat.format(new Date())}</small> { id="${versionName}" }"""
		changelogHistoryFile.write(changelogHistoryFile.text.replaceFirst("<!-- INSERT_HERE -->", "\$0\n\n${headline}\n\n${changelog}\n"))
	}
}